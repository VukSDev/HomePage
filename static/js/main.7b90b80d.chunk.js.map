{"version":3,"sources":["InputBox/InputBox.js","Bookmark/Bookmark.js","Sidebar/Sidebar.js","Clock/Clock.js","App.js","serviceWorker.js","index.js"],"names":["inputBox","props","type","className","placeholder","onKeyDown","key","bookmark","href","site","target","src","image","alt","listElements","document","getElementsByClassName","toggleSidebar","id","style","transform","getElementsByTagName","i","length","opacity","sidebar","onClick","checkTime","setTimeout","startTime","date","Date","hour","getHours","minute","getMinutes","second","getSeconds","clock","innerHTML","toDateString","App","Clock","InputBox","Bookmark","Sidebar","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAQeA,G,UANE,SAACC,GACd,OACI,2BAAOC,KAAK,OAAOC,UAAU,WAAWC,YAAaH,EAAMG,YAAaC,UAAWJ,EAAMK,QCIlFC,EANE,SAACN,GACd,OACI,uBAAGE,UAAU,WAAWK,KAAMP,EAAMQ,KAAMC,OAAQT,EAAMS,QAAQ,yBAAKC,IAAKV,EAAMW,MAAOC,IAAI,OCe7FC,EAAeC,SAASC,uBAAuB,yBAGrD,SAASC,IACL,GAAwD,WAArDF,SAASC,uBAAuB,WAAW,GAAGE,GAAiB,CAC9DH,SAASC,uBAAuB,WAAW,GAAGE,GAAK,OAGnDH,SAASC,uBAAuB,WAAW,GAAGG,MAAMC,UAAY,kBAGhEL,SAASC,uBAAuB,iBAAiB,GAAGK,qBAAqB,OAAO,GAAGF,MAAMC,UAAY,gBAGrG,IAAI,IAAIE,EAAI,EAAGA,EAAIR,EAAaS,OAAQD,IACpCR,EAAaQ,GAAGH,MAAMK,QAAU,QAInC,GAAwD,SAArDT,SAASC,uBAAuB,WAAW,GAAGE,GAAe,CACjEH,SAASC,uBAAuB,WAAW,GAAGE,GAAK,SAGnDH,SAASC,uBAAuB,WAAW,GAAGG,MAAMC,UAAY,oBAGhEL,SAASC,uBAAuB,iBAAiB,GAAGK,qBAAqB,OAAO,GAAGF,MAAMC,UAAY,iBAGrG,IAAI,IAAIE,EAAI,EAAGA,EAAIR,EAAaS,OAAQD,IACpCR,EAAaQ,GAAGH,MAAMK,QAAU,GAK7BC,MApDC,SAACxB,GACb,OACI,yBAAKE,UAAU,UAAUe,GAAG,UACxB,yBAAKf,UAAU,gBAAgBuB,QAAST,GACpC,yBAAKC,GAAG,eAAeP,IAAI,oBAAoBE,IAAI,MAGvD,yBAAKV,UAAU,gBACX,yBAAKA,UAAU,yBAAf,UACA,yBAAKA,UAAU,yBAAf,UACA,yBAAKA,UAAU,yBAAf,UACA,yBAAKA,UAAU,yBAAf,aCahB,SAASwB,EAAUL,GAEf,OADIA,EAAI,KAAKA,EAAI,IAAMA,GAChBA,EAGXM,YArBA,SAASC,IACL,IAAIC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,WACZC,EAASJ,EAAKK,aACdC,EAASN,EAAKO,aAGdC,EAAQN,EAAO,KAFnBE,EAASP,EAAUO,IAEe,KADlCE,EAAST,EAAUS,IAInBrB,SAASC,uBAAuB,SAAS,GAAGuB,UAAYD,EACxDvB,SAASC,uBAAuB,QAAQ,GAAGuB,UAAYT,EAAKU,eAE5DZ,WAAWC,EAAW,OAQJ,IAEPS,MA9BD,SAACrC,GACX,OACI,yBAAKE,UAAWF,EAAMC,QCgDfuC,MApBf,WACE,OACE,6BACE,yBAAKtC,UAAU,oBACb,yBAAKA,UAAU,oBACb,kBAACuC,EAAD,CAAOxC,KAAK,UACZ,kBAACwC,EAAD,CAAOxC,KAAK,SACZ,kBAACyC,EAAD,CAAUvC,YAAY,eACtB,yBAAKD,UAAU,sBACb,kBAACyC,EAAD,CAAUnC,KAAK,2BAA2BC,OAAO,SAASE,MAAM,sBAChE,kBAACgC,EAAD,CAAUnC,KAAK,0BAA0BC,OAAO,SAASE,MAAM,uBAC/D,kBAACgC,EAAD,CAAUnC,KAAK,2BAA2BC,OAAO,SAASE,MAAM,0BAGpE,kBAACiC,EAAD,SCnCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrC,SAASsC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b90b80d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst inputBox = (props) => {\r\n    return (\r\n        <input type=\"text\" className=\"inputbox\" placeholder={props.placeholder} onKeyDown={props.key} /*value={props.value} onChange={props.changeHandler}*//>\r\n    )\r\n}\r\n\r\nexport default inputBox;","import React from 'react'\r\n\r\nconst bookmark = (props) => {\r\n    return (\r\n        <a className=\"bookmark\" href={props.site} target={props.target}><img src={props.image} alt=\"\"/></a>\r\n    )\r\n}\r\n\r\nexport default bookmark;","import React from 'react'\r\n\r\nconst sidebar = (props) => {\r\n    return (\r\n        <div className=\"sidebar\" id=\"closed\">\r\n            <div className=\"sidebar-arrow\" onClick={toggleSidebar}>\r\n                <img id=\"closed-arrow\" src=\"/images/arrow.png\" alt=\"\"/>\r\n            </div>\r\n\r\n            <div className=\"sidebar-list\">\r\n                <div className=\"sidebar-list--element\">TODO 1</div>\r\n                <div className=\"sidebar-list--element\">TODO 2</div>\r\n                <div className=\"sidebar-list--element\">TODO 3</div>\r\n                <div className=\"sidebar-list--element\">TODO 4</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst listElements = document.getElementsByClassName('sidebar-list--element');\r\n\r\n// Opens and closes the sidebar\r\nfunction toggleSidebar() {\r\n    if(document.getElementsByClassName('sidebar')[0].id === 'closed') {\r\n        document.getElementsByClassName('sidebar')[0].id = 'open';\r\n\r\n        // Slide sidebar from the left\r\n        document.getElementsByClassName('sidebar')[0].style.transform = 'translate(0rem)';\r\n\r\n        // Rotates the arrow to point left\r\n        document.getElementsByClassName('sidebar-arrow')[0].getElementsByTagName('img')[0].style.transform = 'rotate(90deg)';\r\n\r\n        // Shows the elements\r\n        for(let i = 0; i < listElements.length; i++) {\r\n            listElements[i].style.opacity = .8;\r\n        }\r\n    }\r\n\r\n    else if(document.getElementsByClassName('sidebar')[0].id === 'open') {\r\n        document.getElementsByClassName('sidebar')[0].id = 'closed';\r\n\r\n        // Slide sidebar to the left\r\n        document.getElementsByClassName('sidebar')[0].style.transform = 'translate(-35rem)';\r\n\r\n        // Rotates the arrow to point right\r\n        document.getElementsByClassName('sidebar-arrow')[0].getElementsByTagName('img')[0].style.transform = 'rotate(-90deg)';\r\n\r\n        // Hides the elements\r\n        for(let i = 0; i < listElements.length; i++) {\r\n            listElements[i].style.opacity = 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default sidebar;","import React from 'react'\r\n\r\n\r\nconst clock = (props) => {\r\n    return (\r\n        <div className={props.type}>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction startTime() {\r\n    var date = new Date();\r\n    var hour = date.getHours();\r\n    var minute = date.getMinutes();\r\n    var second = date.getSeconds();\r\n    minute = checkTime(minute);\r\n    second = checkTime(second);\r\n    var clock = hour + \":\" + minute + \":\" + second;\r\n    \r\n    // Display clock and date\r\n    document.getElementsByClassName('clock')[0].innerHTML = clock;\r\n    document.getElementsByClassName('date')[0].innerHTML = date.toDateString();\r\n\r\n    setTimeout(startTime, 1000);\r\n}\r\n\r\nfunction checkTime(i) {\r\n    if (i < 10) {i = \"0\" + i};  // add zero in front of numbers < 10    \r\n    return i;\r\n}\r\n\r\nsetTimeout(startTime, 10);\r\n\r\nexport default clock;","import React from 'react';\r\nimport './css/style.css';\r\n\r\n// Components\r\nimport InputBox from './InputBox/InputBox';\r\nimport Bookmark from './Bookmark/Bookmark';\r\nimport Sidebar from './Sidebar/Sidebar';\r\nimport Clock from './Clock/Clock';\r\n\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <div className=\"global-container\">\r\n        <div className=\"middle-container\">\r\n          <Clock type=\"clock\" />\r\n          <Clock type=\"date\" />\r\n          <InputBox placeholder=\"duckduckgo\"/>\r\n          <div className=\"bookmark-container\">\r\n            <Bookmark site=\"https://www.4chan.org/g/\" target=\"_blank\" image=\"/images/4chan.png\"/>\r\n            <Bookmark site=\"https://www.reddit.com/\" target=\"_blank\" image=\"/images/reddit.png\"/>\r\n            <Bookmark site=\"https://www.youtube.com/\" target=\"_blank\" image=\"/images/youtube.png\"/>\r\n          </div>\r\n        </div>\r\n        <Sidebar/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}