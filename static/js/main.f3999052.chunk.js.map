{"version":3,"sources":["InputBox/InputBox.js","Bookmark/Bookmark.js","BackgroundBox/BackgroundBox.js","Sidebar/Sidebar.js","Clock/Clock.js","App.js","serviceWorker.js","index.js"],"names":["inputBox","props","onSubmit","enter","type","className","placeholder","value","inputValue","onChange","changed","spellCheck","bookmark","href","site","target","src","image","alt","backgroundBox","listElements","document","getElementsByClassName","toggleSidebar","sidebarEl","sidebarArrowEl","id","style","transform","getElementsByTagName","i","length","opacity","sidebar","onClick","BackgroundBox","backgroundLink","checkTime","setTimeout","startTime","date","Date","hour","getHours","minute","getMinutes","second","getSeconds","clock","innerHTML","toDateString","App","state","isSearchOn","search","potentialBackgroundLink","searchChangeHandler","event","setState","console","log","submitHandler","preventDefault","window","open","Clock","InputBox","this","Bookmark","Sidebar","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAWeA,G,KATE,SAACC,GACd,OACI,0BAAMC,SAAUD,EAAME,OAClB,2BAAOC,KAAK,OAAOC,UAAU,WAAWC,YAAaL,EAAMK,YAAaC,MAAON,EAAMO,WAAYC,SAAUR,EAAMS,QAASC,WAAW,UADzI,KAEI,4BAAQN,UAAU,kBAAkBD,KAAK,cCEtCQ,EANE,SAACX,GACd,OACI,uBAAGI,UAAU,WAAWQ,KAAMZ,EAAMa,KAAMC,OAAQd,EAAMc,QAAQ,yBAAKC,IAAKf,EAAMgB,MAAOC,IAAI,OCQpFC,EATO,SAAClB,GACnB,OACI,0BAAMI,UAAU,qBAAqBH,SAAUD,EAAMS,SACjD,2BAAOJ,YAAY,GAAGD,UAAU,gBAAgBD,KAAK,OAAOO,WAAW,UACvE,4BAAQN,UAAU,sBCgBxBe,EAAeC,SAASC,uBAAuB,yBAGrD,SAASC,IAEL,IAAMC,EAAYH,SAASC,uBAAuB,WAAW,GACvDG,EAAiBJ,SAASC,uBAAuB,iBAAiB,GAExE,GAAoB,WAAjBE,EAAUE,GAAiB,CAC1BF,EAAUE,GAAK,OAGfF,EAAUG,MAAMC,UAAY,kBAG5BH,EAAeI,qBAAqB,OAAO,GAAGF,MAAMC,UAAY,gBAGhE,IAAI,IAAIE,EAAI,EAAGA,EAAIV,EAAaW,OAAQD,IACpCV,EAAaU,GAAGH,MAAMK,QAAU,QAInC,GAAoB,SAAjBR,EAAUE,GAAe,CAC7BF,EAAUE,GAAK,SAGfF,EAAUG,MAAMC,UAAY,oBAG5BH,EAAeI,qBAAqB,OAAO,GAAGF,MAAMC,UAAY,iBAGhE,IAAI,IAAIE,EAAI,EAAGA,EAAIV,EAAaW,OAAQD,IACpCV,EAAaU,GAAGH,MAAMK,QAAU,GAK7BC,MAzDC,SAAChC,GACb,OACI,yBAAKI,UAAU,UAAUqB,GAAG,UACxB,yBAAKrB,UAAU,gBAAgB6B,QAASX,GACpC,yBAAKG,GAAG,eAAeV,IAAI,aAAaE,IAAI,MAGhD,yBAAKb,UAAU,gBACX,yBAAKA,UAAU,yBAAf,UACA,yBAAKA,UAAU,yBAAf,UACA,yBAAKA,UAAU,yBAAf,UACA,yBAAKA,UAAU,yBAAf,WAEJ,kBAAC8B,EAAD,CAAeC,eAAgBnC,EAAMmC,eAAgB1B,QAAST,EAAMS,YCQhF,SAAS2B,EAAUP,GAEf,OADIA,EAAI,KAAKA,EAAI,IAAMA,GAChBA,EAGXQ,YArBA,SAASC,IACL,IAAIC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,WACZC,EAASJ,EAAKK,aACdC,EAASN,EAAKO,aAGdC,EAAQN,EAAO,KAFnBE,EAASP,EAAUO,IAEe,KADlCE,EAAST,EAAUS,IAInBzB,SAASC,uBAAuB,SAAS,GAAG2B,UAAYD,EACxD3B,SAASC,uBAAuB,QAAQ,GAAG2B,UAAYT,EAAKU,eAE5DZ,WAAWC,EAAW,OAQJ,IAEPS,MA9BD,SAAC/C,GACX,OACI,yBAAKI,UAAWJ,EAAMG,QCwIf+C,E,2MAnIbC,MAAQ,CAENC,YAAY,EACZ/C,YAAa,aACbC,MAAO,GACP+C,OAAQ,6BAGRC,wBAAyB,GACzBnB,eAAgB,mB,EAIlBoB,oBAAsB,SAACC,GAKrB,OAJA,EAAKC,SAAS,CACZnD,MAAOkD,EAAM1C,OAAOR,QAGf,EAAK6C,MAAM7C,OAChB,IAAK,KACH,EAAKmD,SAAS,CACZpD,YAAa,SACbgD,OAAQ,mCACRD,YAAY,EACZ9C,MAAO,KAEToD,QAAQC,IAAI,sCACd,MAEA,IAAK,OACH,EAAKF,SAAS,CACZpD,YAAa,aACbgD,OAAQ,6BACRD,YAAY,EACZ9C,MAAO,KAEToD,QAAQC,IAAI,0CACd,MAEA,IAAK,KACH,EAAKF,SAAS,CACZpD,YAAa,YACbgD,OAAQ,iCACRD,YAAY,EACZ9C,MAAO,KAEToD,QAAQC,IAAI,yCACd,MAEA,IAAK,MACH,EAAKF,SAAS,CACZpD,YAAa,UACbgD,OAAQ,gDACRD,YAAY,EACZ9C,MAAO,KAEToD,QAAQC,IAAI,yC,EA8ClBC,cAAgB,SAACJ,GACfA,EAAMK,iBAENH,QAAQC,IAAI,iBAAmB,EAAKR,MAAM7C,MAAQ,OAAS,EAAK6C,MAAM9C,YAAc,OAEpFyD,OAAOC,KAAK,EAAKZ,MAAME,OAAS,EAAKF,MAAM7C,Q,wEAI3C,OACE,6BACE,yBAAKF,UAAU,oBACb,yBAAKA,UAAU,oBACb,kBAAC4D,EAAD,CAAO7D,KAAK,UACZ,kBAAC6D,EAAD,CAAO7D,KAAK,SACZ,kBAAC8D,EAAD,CAAU5D,YAAa6D,KAAKf,MAAM9C,YAAaE,WAAY2D,KAAKf,MAAM7C,MAAOG,QAASyD,KAAKX,oBAAqBrD,MAAOgE,KAAKN,gBAC5H,yBAAKxD,UAAU,sBACb,kBAAC+D,EAAD,CAAUtD,KAAK,2BAA2BC,OAAO,SAASE,MAAM,eAChE,kBAACmD,EAAD,CAAUtD,KAAK,0BAA0BC,OAAO,SAASE,MAAM,gBAC/D,kBAACmD,EAAD,CAAUtD,KAAK,2BAA2BC,OAAO,SAASE,MAAM,mBAGpE,kBAACoD,EAAD,Y,GA7HQC,aCGEC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvD,SAASwD,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f3999052.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst inputBox = (props) => {\r\n    return (\r\n        <form onSubmit={props.enter}>\r\n            <input type=\"text\" className=\"inputbox\" placeholder={props.placeholder} value={props.inputValue} onChange={props.changed} spellCheck=\"false\" /*onKeyPress={props.enter}*//>\\\r\n            <button className=\"inputbox-button\" type=\"submit\"></button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default inputBox;","import React from 'react'\r\n\r\nconst bookmark = (props) => {\r\n    return (\r\n        <a className=\"bookmark\" href={props.site} target={props.target}><img src={props.image} alt=\"\"/></a>\r\n    )\r\n}\r\n\r\nexport default bookmark;","import React from 'react';\r\nimport '../css/style.css'\r\n\r\nconst backgroundBox = (props) => {\r\n    return(\r\n        <form className=\"backgroundbox-form\" onSubmit={props.changed}>\r\n            <input placeholder=\"\" className=\"backgroundbox\" type=\"text\" spellCheck=\"false\" />\r\n            <button className=\"inputbox-button\"></button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default backgroundBox;","import React from 'react'\r\n\r\n// Components\r\nimport BackgroundBox from '../BackgroundBox/BackgroundBox';\r\n\r\nconst sidebar = (props) => {\r\n    return (\r\n        <div className=\"sidebar\" id=\"closed\">\r\n            <div className=\"sidebar-arrow\" onClick={toggleSidebar}>\r\n                <img id=\"closed-arrow\" src=\"/arrow.png\" alt=\"\"/>\r\n            </div>\r\n\r\n            <div className=\"sidebar-list\">\r\n                <div className=\"sidebar-list--element\">TODO 1</div>\r\n                <div className=\"sidebar-list--element\">TODO 2</div>\r\n                <div className=\"sidebar-list--element\">TODO 3</div>\r\n                <div className=\"sidebar-list--element\">TODO 4</div>\r\n            </div>\r\n            <BackgroundBox backgroundLink={props.backgroundLink} changed={props.changed}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst listElements = document.getElementsByClassName('sidebar-list--element');\r\n\r\n// Opens and closes the sidebar\r\nfunction toggleSidebar() {\r\n    // Store the sidebar element and the sidebar arrow element\r\n    const sidebarEl = document.getElementsByClassName('sidebar')[0];\r\n    const sidebarArrowEl = document.getElementsByClassName('sidebar-arrow')[0];\r\n\r\n    if(sidebarEl.id === 'closed') {\r\n        sidebarEl.id = 'open';\r\n\r\n        // Slide sidebar from the left\r\n        sidebarEl.style.transform = 'translate(0rem)';\r\n\r\n        // Rotates the arrow to point left\r\n        sidebarArrowEl.getElementsByTagName('img')[0].style.transform = 'rotate(90deg)';\r\n\r\n        // Shows the elements\r\n        for(let i = 0; i < listElements.length; i++) {\r\n            listElements[i].style.opacity = .8;\r\n        }\r\n    }\r\n\r\n    else if(sidebarEl.id === 'open') {\r\n        sidebarEl.id = 'closed';\r\n\r\n        // Slide sidebar to the left\r\n        sidebarEl.style.transform = 'translate(-35rem)';\r\n\r\n        // Rotates the arrow to point right\r\n        sidebarArrowEl.getElementsByTagName('img')[0].style.transform = 'rotate(-90deg)';\r\n\r\n        // Hides the elements\r\n        for(let i = 0; i < listElements.length; i++) {\r\n            listElements[i].style.opacity = 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default sidebar;","import React from 'react'\r\n\r\n\r\nconst clock = (props) => {\r\n    return (\r\n        <div className={props.type}>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction startTime() {\r\n    var date = new Date();\r\n    var hour = date.getHours();\r\n    var minute = date.getMinutes();\r\n    var second = date.getSeconds();\r\n    minute = checkTime(minute);\r\n    second = checkTime(second);\r\n    var clock = hour + \":\" + minute + \":\" + second;\r\n    \r\n    // Display clock and date\r\n    document.getElementsByClassName('clock')[0].innerHTML = clock;\r\n    document.getElementsByClassName('date')[0].innerHTML = date.toDateString();\r\n\r\n    setTimeout(startTime, 1000);\r\n}\r\n\r\nfunction checkTime(i) {\r\n    if (i < 10) {i = \"0\" + i};  // add zero in front of numbers < 10    \r\n    return i;\r\n}\r\n\r\nsetTimeout(startTime, 10);\r\n\r\nexport default clock;","import React, { Component } from 'react';\r\nimport './css/style.css';\r\n\r\n// Components\r\nimport InputBox from './InputBox/InputBox';\r\nimport Bookmark from './Bookmark/Bookmark';\r\nimport Sidebar from './Sidebar/Sidebar';\r\nimport Clock from './Clock/Clock';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    // inputbox\r\n    isSearchOn: true,\r\n    placeholder: 'duckduckgo',\r\n    value: '',\r\n    search: 'https://duckduckgo.com/?q=',\r\n\r\n    //sidebar - background link\r\n    potentialBackgroundLink: '',\r\n    backgroundLink: '/background.jpg'\r\n  }\r\n\r\n  // Changes search engine based on the given parameter\r\n  searchChangeHandler = (event) => {\r\n    this.setState({\r\n      value: event.target.value\r\n    });\r\n\r\n    switch(this.state.value) {\r\n      case '-g':\r\n        this.setState({\r\n          placeholder: 'google',\r\n          search: 'https://www.google.com/search?q=',\r\n          isSearchOn: true,\r\n          value: ''\r\n        });\r\n        console.log(\"The search engine is set to Google\");\r\n      break;\r\n\r\n      case '-ddg':\r\n        this.setState({\r\n          placeholder: 'duckduckgo',\r\n          search: 'https://duckduckgo.com/?q=',\r\n          isSearchOn: true,\r\n          value: ''\r\n        });\r\n        console.log(\"The search engine is set to DuckDuckGo\");\r\n      break;\r\n        \r\n      case '-w':\r\n        this.setState({\r\n          placeholder: 'wikipedia',\r\n          search: 'https://en.wikipedia.org/wiki/',\r\n          isSearchOn: true,\r\n          value: ''\r\n        });\r\n        console.log(\"The search engine is set to Wikipedia\");\r\n      break;\r\n\r\n      case '-yt':\r\n        this.setState({\r\n          placeholder: 'youtube',\r\n          search: 'https://www.youtube.com/results?search_query=',\r\n          isSearchOn: true,\r\n          value: ''\r\n        });\r\n        console.log(\"The search engine is set to YouTube\");\r\n      break;\r\n      \r\n      default:\r\n        // this.setState({\r\n        //   isSearchOn: false\r\n        // })\r\n        break;\r\n      }\r\n  }\r\n  \r\n  // Changes background image when url is passed to the input box at the bottom of the sidebar\r\n  // backgroundChangeHandler = (event) => {\r\n  //   event.preventDefault();\r\n  //   let currentBackground = this.state.backgroundLink;\r\n  //   let currentPotentialBackground = this.state.potentialBackgroundLink;\r\n\r\n  //   this.setState({\r\n  //     potentialBackgroundLink: event.target.value\r\n  //   });\r\n\r\n  //   const bodyElement = document.getElementsByTagName(\"body\")[0];\r\n    \r\n  //   if(this.state.potentialBackgroundLink.slice(this.state.potentialBackgroundLink.length - 3) === \"png\" ||\r\n  //     this.state.potentialBackgroundLink.slice(this.state.potentialBackgroundLink.length - 3) === \"jpg\" ||\r\n  //     this.state.potentialBackgroundLink.slice(this.state.potentialBackgroundLink.length - 3) === \"JPG\" ||\r\n  //     this.state.potentialBackgroundLink.slice(this.state.potentialBackgroundLink.length - 3) === \"PNG\" ) {\r\n  //     this.setState({\r\n  //       backgroundLink: this.state.potentialBackgroundLink\r\n  //     })\r\n        \r\n  //     bodyElement.style.backgroundImage = \"url('\" + this.state.backgroundLink + \"')\";\r\n  //   }\r\n  //   else if (this.state.potentialBackgroundLink === \"default\") {\r\n  //     this.setState({\r\n  //       backgroundLink: '/background.jpg'\r\n  //     })\r\n  //     bodyElement.style.backgroundImage = \"url('/background.jpg')\";\r\n  //   }\r\n  //   else {\r\n  //     bodyElement.style.backgroundImage = \"url('\" + this.state.backgroundLink + \"')\";\r\n  //     console.log(this.state.backgroundLink);\r\n  //   }\r\n  // }\r\n\r\n  // Listens to enter to search the chosen search engine\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    console.log(\"Searching for \" + this.state.value + \" on \" + this.state.placeholder + \"...\");\r\n\r\n    window.open(this.state.search + this.state.value);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"global-container\">\r\n          <div className=\"middle-container\">\r\n            <Clock type=\"clock\" />\r\n            <Clock type=\"date\" />\r\n            <InputBox placeholder={this.state.placeholder} inputValue={this.state.value} changed={this.searchChangeHandler} enter={this.submitHandler}/>\r\n            <div className=\"bookmark-container\">\r\n              <Bookmark site=\"https://www.4chan.org/g/\" target=\"_blank\" image=\"/4chan.png\"/>\r\n              <Bookmark site=\"https://www.reddit.com/\" target=\"_blank\" image=\"/reddit.png\"/>\r\n              <Bookmark site=\"https://www.youtube.com/\" target=\"_blank\" image=\"/youtube.png\"/>\r\n            </div>\r\n          </div>\r\n          <Sidebar /*backgroundLink={this.state.backgroundLink} changed={this.backgroundChangeHandler}*//>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}